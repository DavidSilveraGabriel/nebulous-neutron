---
import { trackChatbotInteraction } from '../../utils/trackChatbotInteraction';


---

<div class="fixed bottom-4 right-4 z-[999]">
  <!-- Bot√≥n toggle -->
  <button
    id="chatbot-toggle"
    class="w-14 h-14 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full shadow-xl cursor-pointer transition-all duration-300 hover:scale-110 flex items-center justify-center z-[999]"
    aria-label="Abrir chat"
  >
    <svg class="w-6 h-6 text-white transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
    </svg>
  </button>

  <!-- Contenedor del Chat -->
  <div
        id="chatbot-container"
        class="fixed bottom-20 right-4 w-[95vw] md:w-96 h-[70vh] bg-gray-900 backdrop-blur-lg bg-opacity-95 text-white rounded-xl shadow-2xl opacity-0 translate-y-4 scale-95 origin-bottom-right transition-all duration-300 border border-white/10 invisible"
      >
    <div class="flex flex-col h-full pointer-events-auto">
      <!-- Header -->
      <div class="bg-gradient-to-r from-blue-600/30 to-purple-600/30 p-4 rounded-t-xl flex justify-between items-center">
        <h3 class="font-bold text-lg">Bob üßêüç∑</h3>
        <button
          id="close-chat"
          class="p-1 hover:text-blue-400 transition-colors"
          aria-label="Cerrar chat"
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
        <!-- En el header del chat, junto al bot√≥n de cerrar -->
        <button
          id="hard-reset"
          class="p-1 hover:text-red-500 transition-colors"
          aria-label="Reinicio completo"
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
          </svg>
        </button>
      </div>

      <!-- √Årea de mensajes -->
      <div
        id="chat-messages"
        class="flex-1 overflow-y-auto p-4 space-y-4 text-sm scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent"
      >
        <!-- Mensaje inicial -->
        <div class="bot-message flex justify-start">
          <div class="bg-gray-800/80 rounded-xl p-3 max-w-[85%]">
            ¬°Hola! ¬øEn qu√© puedo ayudarte hoy?
          </div>
        </div>
      </div>

      <!-- Indicador de estado -->
      <div
        id="status-indicator"
        class="flex items-center gap-2 px-4 pb-2 text-xs text-gray-400 opacity-0 transition-opacity duration-200"
      >
        <div class="spinner animate-spin h-4 w-4 border-2 border-white/50 border-t-transparent rounded-full"></div>
        <span>Generando respuesta...</span>
      </div>

      <!-- Input de usuario -->
      <div class="border-t border-white/10 p-4 bg-gray-900/50">
        <div class="flex gap-2">
          <input
            id="user-input"
            type="text"
            placeholder="Escribe tu pregunta..."
            class="flex-1 bg-gray-800/70 border border-white/10 rounded-lg px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
            aria-label="Escribe tu mensaje"
          />
          <button
            id="send-btn"
            class="bg-blue-600 hover:bg-blue-700 px-4 rounded-lg transition-colors flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Enviar mensaje"
            disabled
          >
            <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Animaciones personalizadas */
  @keyframes messagePop {
    0% { transform: scale(0.8); opacity: 0; }
    100% { transform: scale(1); opacity: 1; }
  }

  @keyframes typing {
    0%, 80%, 100% { transform: translateY(0); }
    30% { transform: translateY(-6px); }
  }

  .message-enter {
    animation: messagePop 0.3s ease-out;
  }

  .typing-indicator {
    display: inline-flex;
    gap: 4px;
    padding: 0.5rem 1rem;
  }

  .typing-dot {
    width: 6px;
    height: 6px;
    background: #94a3b8;
    border-radius: 50%;
    animation: typing 1.4s infinite ease-in-out;
  }

  .user-message {
    margin-left: auto;
    margin-right: 0.5rem;
  }

  .bot-message {
    margin-right: auto;
    margin-left: 0.5rem;
  }

  .scrollbar-thumb-gray-700::-webkit-scrollbar-thumb {
    background-color: #374151;
    border-radius: 0.5rem;
  }
</style>

<script>
  
  const API_ENDPOINT = '/api/query';
  const MAX_HISTORY_LENGTH = 20;
  const LOCAL_STORAGE_KEY = 'chatHistory';
  const RETRY_CONFIG = { maxRetries: 2, baseDelay: 1000 };
 
  interface Message {
      role: 'user' | 'assistant' | 'error';
      content: string;
      sources?: string[];
      timestamp: number;
  }
 
  interface ChatState {
      isOpen: boolean;
      history: Message[];
      controller: AbortController | null;
  }
 
  let chatState: ChatState = {
      isOpen: false,
      history: [],
      controller: null,
  };
 
  const elements = {
      toggleButton: document.getElementById('chatbot-toggle') as HTMLButtonElement | null,
      container: document.getElementById('chatbot-container') as HTMLElement | null,
      closeButton: document.getElementById('close-chat') as HTMLButtonElement | null,
      messagesContainer: document.getElementById('chat-messages') as HTMLElement | null,
      input: document.getElementById('user-input') as HTMLInputElement | null,
      sendButton: document.getElementById('send-btn') as HTMLButtonElement | null,
      statusIndicator: document.getElementById('status-indicator') as HTMLDivElement | null,
  };
 
  const utils = {
    formatContent: (text: string) => {
      const sanitized = document.createElement('div');
      sanitized.textContent = text;
      return sanitized.innerHTML
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')
        .replace(/`(.*?)`/g, '<code>$1</code>')
        .replace(/\n/g, '<br>');
    },
    
    log: (type: string, message: string, data?: any) => {
      console.log(`[${new Date().toISOString()}] [${type.toUpperCase()}] ${message}`, data);
    },
  };
  
  const ui = {
      toggleChat: () => {
          chatState.isOpen = !chatState.isOpen;
          localStorage.setItem('chatIsOpen', JSON.stringify(chatState.isOpen));
 
          if (elements.container) {
              elements.container.classList.toggle('opacity-0', !chatState.isOpen);
              elements.container.classList.toggle('translate-y-4', !chatState.isOpen);
              elements.container.classList.toggle('scale-95', !chatState.isOpen);
              elements.container.classList.toggle('invisible', !chatState.isOpen); // A√±adimos toggle de visibilidad
              elements.container.style.pointerEvents = chatState.isOpen ? 'auto' : 'none';
          }
          if (elements.toggleButton) {
              elements.toggleButton.classList.toggle('rotate-45', chatState.isOpen);
          }
          if (elements.messagesContainer && chatState.isOpen) {
              elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;
          }
      },
 
 
      addMessage: (role: string, content: string, sources: string[] = []) => {
        if (!elements.messagesContainer) return;
 
    const messageElement = document.createElement('div');
    messageElement.className = `${role}-message flex ${role === 'user' ? 'justify-end' : 'justify-start'} message-enter`;
    
    const bubble = document.createElement('div');
    bubble.className = `rounded-xl p-3 max-w-[85%] ${
      role === 'error' ? 'bg-red-600/20 text-red-400 border border-red-600/30' :
      role === 'user' ? 'bg-blue-600/80' : 'bg-gray-800/80'
    }`;
 
    bubble.innerHTML = utils.formatContent(content);
 
    if (sources.length > 0) {
      const sourcesDiv = document.createElement('div');
      sourcesDiv.className = 'mt-2 pt-2 border-t border-white/10 text-xs text-gray-400';
      sourcesDiv.innerHTML = `
        <div class="font-medium mb-1">Fuentes:</div>
        ${sources.map(s => `<div class="truncate">${s}</div>`).join('')}
      `;
      bubble.appendChild(sourcesDiv);
    }
 
    messageElement.appendChild(bubble);
    elements.messagesContainer.appendChild(messageElement);
    elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;
  },
 
      toggleLoading: (isLoading: boolean) => {
          if (elements.statusIndicator) {
              elements.statusIndicator.style.opacity = isLoading ? '1' : '0';
          }
          if (elements.sendButton) {
              elements.sendButton.disabled = isLoading;
          }
          if (elements.input) {
              elements.input.disabled = isLoading;
          }
      },
      showTypingIndicator: () => {
        if (!elements.messagesContainer) return;
  
        const indicator = document.createElement('div');
        indicator.className = 'typing-indicator bot-message';
        indicator.innerHTML = `
          <div class="bg-gray-800/80 rounded-xl p-3 max-w-[85%]">
            <div class="flex items-center gap-2">
              ${Array(3).fill('<div class="typing-dot"></div>').join('')}
            </div>
          </div>
        `;
        elements.messagesContainer.appendChild(indicator);
        elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;
    },
    removeTypingIndicator: () => {
      document.querySelectorAll('.typing-indicator').forEach(indicator => indicator.remove());
    }
  };
  const hardResetSession = async () => {
  if (!confirm('¬øResetear toda la conversaci√≥n y contexto?')) return;

  try {
    const oldSessionId = localStorage.getItem('chatSessionId');
    
    // 1. Reset backend
    const resetResponse = await fetch('/api/query', {
      method: 'DELETE',
      headers: { 
        'X-Session-ID': oldSessionId || '',
        'Content-Type': 'application/json'
      }
    });
    
    if (!resetResponse.ok) throw new Error('Error en el servidor');
    
    const { newSessionId } = await resetResponse.json();

    // 2. Reset frontend
    localStorage.setItem('chatSessionId', newSessionId);
    localStorage.removeItem('chatHistory');
    
    // 3. Reiniciar UI
    if (elements.messagesContainer) {
      elements.messagesContainer.innerHTML = `
        <div class="bot-message flex justify-start">
          <div class="bg-gray-800/80 rounded-xl p-3 max-w-[85%]">
            ¬°Conversaci√≥n reiniciada! ¬øEn qu√© puedo ayudarte ahora?
          </div>
        </div>`;
    }
    
    // 4. Reset estado interno
    chatState = {
      isOpen: true,
      history: [],
      controller: null
    };

    // 5. Forzar nuevo handshake
    await fetch('/api/query', { method: 'POST', body: JSON.stringify({ message: '' }) });

  } catch (error) {
    console.error('Reset fallido:', error);
    alert('Error al reiniciar. Recarga la p√°gina.');
  }
};

// Vincular al bot√≥n
document.getElementById('hard-reset')?.addEventListener('click', hardResetSession);
 
  const api = {
      sendQuery: async (query: string) => {
          let sessionId = localStorage.getItem('chatSessionId');
          if (!sessionId) {
              sessionId = crypto.randomUUID();
              localStorage.setItem('chatSessionId', sessionId);
          }
 
          if (chatState.controller) chatState.controller.abort();
          chatState.controller = new AbortController();
 
          let retries = RETRY_CONFIG.maxRetries;
          while (retries >= 0) {
              try {
                  const response = await fetch(API_ENDPOINT, {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json',
                          'X-Session-ID': sessionId
                      },
                      body: JSON.stringify({ message: query })
                  });
 
                  if (!response.ok) throw new Error(`HTTP ${response.status}`);
                  return await response.json();
              } catch (error) {
                  if (retries === 0 || (error as Error).name === 'AbortError') throw error;
                  await new Promise(resolve => setTimeout(resolve, RETRY_CONFIG.baseDelay * (RETRY_CONFIG.maxRetries - retries + 1)));
                  retries--;
              }
          }
          throw new Error('Max retries reached');
      }
  };
 
  const history = {
    load: () => {
      try {
        const saved = localStorage.getItem(LOCAL_STORAGE_KEY);
        return saved ? JSON.parse(saved) : [];
      } catch (error) {
        utils.log('error', 'Error loading history', error);
        return [];
      }
    },
    save: () => {
      try {
        const limited = chatState.history.slice(-MAX_HISTORY_LENGTH);
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(limited));
      } catch (error) {
        utils.log('error', 'Error saving history', error);
      }
    }
  };
 
 const init = () => {
  if (elements.container) {
    elements.container.classList.remove('opacity-0', 'translate-y-4', 'scale-95');
  }
  elements.toggleButton?.removeEventListener('click', ui.toggleChat);
  elements.closeButton?.removeEventListener('click', ui.toggleChat);
  const savedState = localStorage.getItem('chatIsOpen');
  if (savedState) {
      chatState.isOpen = JSON.parse(savedState);
  }
  
  if (elements.container) {
      elements.container.classList.toggle('opacity-0', !chatState.isOpen);
      elements.container.classList.toggle('translate-y-4', !chatState.isOpen);
      elements.container.classList.toggle('scale-95', !chatState.isOpen);
      elements.container.classList.toggle('invisible', !chatState.isOpen);
      elements.container.style.pointerEvents = chatState.isOpen ? 'auto' : 'none';
  }
  if (elements.toggleButton) {
      elements.toggleButton.classList.toggle('rotate-45', chatState.isOpen);
  }
  elements.toggleButton?.addEventListener('click', ui.toggleChat);
  elements.closeButton?.addEventListener('click', ui.toggleChat);
 
  elements.input?.addEventListener('input', (e) => {
      if (elements.sendButton) {
          elements.sendButton.disabled = !(e.target as HTMLInputElement).value.trim();
      }
  });
  
  elements.input?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey && elements.sendButton && !elements.sendButton.disabled) {
        e.preventDefault();
        elements.sendButton.dispatchEvent(new Event('click'));
    }
 });
 
  elements.sendButton?.addEventListener('click', async () => {
      if (!elements.input || !elements.sendButton) return;
      
      const query = elements.input.value.trim();
      if (!query) return;
 
      elements.sendButton.disabled = true;
      elements.input.disabled = true;
      
       try {
          ui.toggleLoading(true);
          chatState.history.push({ role: 'user', content: query, sources: [], timestamp: Date.now() });
          ui.addMessage('user', query);
 
          ui.showTypingIndicator();
          elements.input.value = '';
           
          const { response, sources = [], error } = await api.sendQuery(query);
          
          ui.removeTypingIndicator();
          
          if (error) {
              ui.addMessage('error', error);
              chatState.history.push({ role: 'error', content: error, timestamp: Date.now() });
          } else {
              chatState.history.push({ role: 'assistant', content: response, sources, timestamp: Date.now() });
              ui.addMessage('assistant', response, sources);
          }
 
          history.save();
       } catch (error) {
           const errorMessage = error instanceof Error ? error.message : 'Error de conexi√≥n';
          ui.addMessage('error', errorMessage);
          utils.log('error', 'Chat error', error);
      } finally {
          ui.toggleLoading(false);
          elements.sendButton.disabled = false;
          elements.input.disabled = false;
      }
  });
 
  if (elements.messagesContainer) {
    chatState.history = history.load();
    chatState.history.forEach(msg => ui.addMessage(msg.role, msg.content, msg.sources));
  }
 };
 
 document.addEventListener('astro:page-load', init);
 window.addEventListener('DOMContentLoaded', init);
 </script>