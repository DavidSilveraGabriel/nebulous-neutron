---
import ProjectCard from '../ProjectCard.astro';

interface Project {
  title: string;
  description: string;
  image: string;
  tags: string[];
  link?: string;
  github?: string;
  duration?: string;
  role?: string;
  results?: string;
  featured?: boolean;
  category?: string;
  caseStudy?: string;
  challenge?: string;
  solution?: string;
  outcome?: string;
}

interface Props {
  projects?: Project[];
  animationType?: 'fade' | 'slide' | 'zoom';
  autoplaySpeed?: number; // en milisegundos
}

const {
  projects = [],
  animationType = 'fade',
  autoplaySpeed = 5000 // 5 segundos por defecto
} = Astro.props;

// Proyectos destacados primero
const sortedProjects = [...projects].sort((a, b) => {
  if (a.featured && !b.featured) return -1;
  if (!a.featured && b.featured) return 1;
  return 0;
});

// Colores y estilos
const accentColor = 'lime-400';
---

<section id="projects" class="py-12 overflow-hidden">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-3 text-gray-900 dark:text-white">
      Featured Projects
    </h2>
    <p class="text-center text-gray-600 dark:text-gray-400 mb-8 max-w-2xl mx-auto text-base">
      Exploring the intersection of AI, machine learning, and technology innovation
    </p>

    <!-- Contenedor del carrusel -->
    <div class="relative">
      <!-- Botones de navegación externos -->
      <button 
        id="prev-button" 
        class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-0 md:-translate-x-6 z-10 p-2 rounded-full bg-white/90 dark:bg-gray-800/90 text-gray-800 dark:text-white shadow-lg hover:bg-lime-100 dark:hover:bg-lime-900/70 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-lime-400 dark:focus:ring-lime-500 transform hover:scale-110 border border-gray-200 dark:border-gray-700"
        aria-label="Proyecto anterior"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 md:h-7 md:w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <button 
        id="next-button" 
        class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-0 md:translate-x-6 z-10 p-2 rounded-full bg-white/90 dark:bg-gray-800/90 text-gray-800 dark:text-white shadow-lg hover:bg-lime-100 dark:hover:bg-lime-900/70 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-lime-400 dark:focus:ring-lime-500 transform hover:scale-110 border border-gray-200 dark:border-gray-700"
        aria-label="Proyecto siguiente"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 md:h-7 md:w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
        </svg>
      </button>
      
      <!-- Carrusel de proyectos -->
      <div id="projects-container" class="carousel-container flex snap-x snap-mandatory overflow-x-hidden h-[70vh] max-h-[500px] cursor-grab active:cursor-grabbing" data-animation-type={animationType} data-autoplay-speed={autoplaySpeed}>
        {sortedProjects.map((_, groupIndex) => {
          // Crear grupos de 3 proyectos
          const startIdx = groupIndex * 3;
          const projectGroup = sortedProjects.slice(startIdx, startIdx + 3);
          
          // Solo crear slides para grupos completos o el último grupo parcial
          if (projectGroup.length === 0) return null;
          
          return (
            <div class="carousel-slide w-full flex-shrink-0 snap-center transition-transform duration-500 grid grid-cols-1 md:grid-cols-3 gap-4" data-index={groupIndex}>
              {projectGroup.map((project, index) => (
                <ProjectCard 
                  project={project} 
                  index={startIdx + index} 
                  layout="carousel" 
                  animationType={animationType}
                />
              ))}
              
              {/* Rellenar con espacios vacíos si el último grupo no está completo */}
              {projectGroup.length < 3 && Array(3 - projectGroup.length).fill(0).map(() => (
                <div class="invisible"></div>
              ))}
            </div>
          );
        })}
      </div>
      
      <!-- Indicadores de posición -->
      <div class="flex justify-center mt-4 space-x-2">
        {Array(Math.ceil(sortedProjects.length / 3)).fill(0).map((_, index) => (
          <button 
            class={`carousel-indicator h-2 rounded-full bg-gray-300 dark:bg-gray-700 hover:bg-lime-300 dark:hover:bg-lime-600 transition-colors duration-300 focus:outline-none ${index === 0 ? 'w-8 bg-lime-400 dark:bg-lime-500' : 'w-4'}`}
            data-index={index}
            aria-label={`Ir al grupo ${index + 1}`}
          >
            <span class="sr-only">Grupo {index + 1}</span>
          </button>
        ))}
      </div>
      
      <!-- Instrucciones de navegación -->
      <p class="text-center text-gray-500 dark:text-gray-400 text-sm mt-2">
        <span class="hidden md:inline">Desliza con el mouse o usa las flechas</span>
        <span class="inline md:hidden">Desliza con el dedo o usa las flechas</span>
        para navegar entre proyectos
      </p>
    </div>
  </div>
</section>

<!-- Modal para detalles del proyecto -->
<div id="project-modal" class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70 backdrop-blur-sm opacity-0 pointer-events-none transition-opacity duration-300">
  <div class="bg-white dark:bg-gray-900 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden shadow-2xl transform scale-95 transition-transform duration-300 border border-lime-200 dark:border-lime-900">
    <!-- Barra de navegación superior -->
    <div class="sticky top-0 z-10 flex justify-between items-center p-3 bg-gradient-to-r from-lime-400/90 to-green-500/90 dark:from-lime-600/90 dark:to-green-700/90 backdrop-blur-sm text-white">
      <h3 id="modal-title" class="text-lg font-semibold truncate"></h3>
      <button id="close-modal" class="p-1.5 rounded-full bg-white/20 hover:bg-white/30 text-white transition-colors duration-300 flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
        <span class="sr-only">Cerrar</span>
      </button>
    </div>
    
    <!-- Contenido del modal -->
    <div id="modal-content" class="p-5 overflow-y-auto max-h-[calc(90vh-3rem)]">
      <!-- El contenido se llenará dinámicamente con JavaScript -->
    </div>
  </div>
</div>

<style>
  .carousel-container {
    scroll-behavior: smooth;
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  .carousel-container::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }
  
  .carousel-indicator.active {
    background-color: theme('colors.lime.400');
    width: 2rem;
  }
  
  /* Animación de entrada para el modal */
  #project-modal.active {
    opacity: 1;
    pointer-events: auto;
  }
  
  #project-modal.active > div {
    transform: scale(1);
  }
  
  /* Estilos modernos para el modal */
  #modal-content::-webkit-scrollbar {
    width: 6px;
  }
  
  #modal-content::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #modal-content::-webkit-scrollbar-thumb {
    background-color: rgba(132, 204, 22, 0.5);
    border-radius: 20px;
  }
  
  /* Efecto de glassmorphism para elementos del modal */
  .glass-card {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }
  
  .dark .glass-card {
    background: rgba(30, 41, 59, 0.7);
    border: 1px solid rgba(30, 41, 59, 0.2);
  }
</style>

<script define:vars={{ sortedProjects }}>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('projects-container');
    const slides = document.querySelectorAll('.carousel-slide');
    const indicators = document.querySelectorAll('.carousel-indicator');
    const modal = document.getElementById('project-modal');
    const modalContent = document.getElementById('modal-content');
    const modalTitle = document.getElementById('modal-title');
    const closeModalButton = document.getElementById('close-modal');
    const prevButton = document.getElementById('prev-button');
    const nextButton = document.getElementById('next-button');
    
    let currentIndex = 0;
    let autoplayInterval = null;
    const autoplaySpeed = container?.getAttribute('data-autoplay-speed') || '5000';
    
    // Variables para el arrastre manual
    let isDragging = false;
    let startX = 0;
    let scrollLeft = 0;
    
    // Función para actualizar el carrusel
    const updateCarousel = (index) => {
      if (!container) return;
      
      // Asegurarse de que el índice esté dentro de los límites
      currentIndex = (index + slides.length) % slides.length;
      
      // Desplazar al slide actual
      const slideElement = slides[currentIndex];
      if (slideElement) {
        container.scrollLeft = slideElement.offsetLeft;
      }
      
      // Actualizar indicadores
      indicators.forEach((indicator, i) => {
        if (i === currentIndex) {
          indicator.classList.add('active', 'w-8', 'bg-lime-400', 'dark:bg-lime-500');
          indicator.classList.remove('w-4', 'bg-gray-300', 'dark:bg-gray-700');
        } else {
          indicator.classList.remove('active', 'w-8', 'bg-lime-400', 'dark:bg-lime-500');
          indicator.classList.add('w-4', 'bg-gray-300', 'dark:bg-gray-700');
        }
      });
    };
    
    // Iniciar autoplay
    const startAutoplay = () => {
      if (autoplayInterval) clearInterval(autoplayInterval);
      
      autoplayInterval = setInterval(() => {
        updateCarousel(currentIndex + 1);
      }, parseInt(autoplaySpeed));
    };
    
    // Detener autoplay
    const stopAutoplay = () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        autoplayInterval = null;
      }
    };
    
    // Inicializar carrusel
    updateCarousel(0);
    startAutoplay();
    
    // Event listeners para los botones de navegación
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        updateCarousel(currentIndex - 1);
        stopAutoplay();
        startAutoplay();
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        updateCarousel(currentIndex + 1);
        stopAutoplay();
        startAutoplay();
      });
    }
    
    // Event listeners para los indicadores
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        updateCarousel(index);
        stopAutoplay();
        startAutoplay();
      });
    });
    
    // Soporte para arrastre con mouse
    if (container) {
      // Mouse events
      container.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.pageX - container.offsetLeft;
        scrollLeft = container.scrollLeft;
        container.style.cursor = 'grabbing';
        stopAutoplay();
      });
      
      container.addEventListener('mouseleave', () => {
        isDragging = false;
        container.style.cursor = 'grab';
        startAutoplay();
      });
      
      container.addEventListener('mouseup', () => {
        isDragging = false;
        container.style.cursor = 'grab';
        
        // Determinar a qué slide moverse basado en la posición actual
        const slideWidth = container.offsetWidth;
        const currentPosition = container.scrollLeft;
        const targetIndex = Math.round(currentPosition / slideWidth);
        
        updateCarousel(targetIndex);
        startAutoplay();
      });
      
      container.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        e.preventDefault();
        const x = e.pageX - container.offsetLeft;
        const walk = (x - startX) * 2; // Multiplicador para ajustar la sensibilidad
        container.scrollLeft = scrollLeft - walk;
      });
      
      // Touch events
      container.addEventListener('touchstart', (e) => {
        isDragging = true;
        startX = e.touches[0].pageX - container.offsetLeft;
        scrollLeft = container.scrollLeft;
        stopAutoplay();
      }, { passive: true });
      
      container.addEventListener('touchend', () => {
        isDragging = false;
        
        // Determinar a qué slide moverse basado en la posición actual
        const slideWidth = container.offsetWidth;
        const currentPosition = container.scrollLeft;
        const targetIndex = Math.round(currentPosition / slideWidth);
        
        updateCarousel(targetIndex);
        startAutoplay();
      }, { passive: true });
      
      container.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        const x = e.touches[0].pageX - container.offsetLeft;
        const walk = (x - startX) * 2;
        container.scrollLeft = scrollLeft - walk;
      }, { passive: true });
    }
    
    // Abrir modal al hacer clic en un proyecto
    document.querySelectorAll('.project-card').forEach((card, index) => {
      card.addEventListener('click', (e) => {
        // Evitar que se abra el modal si se hace clic en los enlaces o si se está arrastrando
        if (e.target.closest('a') || isDragging) return;
        
        stopAutoplay();
        openProjectModal(index);
      });
    });
    
    // Función para abrir el modal con los detalles del proyecto
    const openProjectModal = (index) => {
      if (!modal || !modalContent || !modalTitle) return;
      
      const project = sortedProjects[index];
      if (!project) return;
      
      // Actualizar título del modal
      modalTitle.textContent = project.title;
      
      // Construir el contenido del modal
      modalContent.innerHTML = `
        <div class="space-y-6">
          <div class="relative pt-[45%] rounded-xl overflow-hidden shadow-lg">
            <img 
              src="${project.image}" 
              alt="${project.title}" 
              class="absolute inset-0 w-full h-full object-cover"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-60"></div>
            
            ${project.featured ? `
              <div class="absolute top-4 left-4 bg-gradient-to-r from-amber-500 to-orange-500 text-white px-3 py-1 rounded-full text-xs font-medium">
                Destacado
              </div>
            ` : ''}
          </div>
          
          <div class="flex flex-wrap gap-2 -mt-4">
            ${project.tags.map(tag => `
              <span class="px-3 py-1 text-xs rounded-full bg-lime-100 dark:bg-lime-900/40 text-lime-800 dark:text-lime-300 border border-lime-200 dark:border-lime-800">
                ${tag}
              </span>
            `).join('')}
          </div>
          
          <div class="prose prose-base dark:prose-invert max-w-none">
            <p class="text-gray-700 dark:text-gray-300 leading-relaxed text-base">
              ${project.description}
            </p>
            
            ${(project.duration || project.role || project.results) ? `
              <div class="flex flex-wrap gap-6 my-4 text-sm">
                ${project.duration ? `
                  <div class="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-lime-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span>${project.duration}</span>
                  </div>
                ` : ''}
                
                ${project.role ? `
                  <div class="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-lime-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span>${project.role}</span>
                  </div>
                ` : ''}
                
                ${project.results ? `
                  <div class="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-lime-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                    <span>${project.results}</span>
                  </div>
                ` : ''}
              </div>
            ` : ''}
          </div>
          
          ${project.caseStudy ? `
            <div class="mt-6 space-y-6">
              <div class="glass-card p-4 rounded-xl">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-lime-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                  Estudio de caso
                </h3>
                <p class="text-gray-700 dark:text-gray-300 text-sm">${project.caseStudy}</p>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                ${project.challenge ? `
                  <div class="glass-card p-4 rounded-xl">
                    <h4 class="text-base font-medium text-gray-900 dark:text-white mb-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                      </svg>
                      Desafío
                    </h4>
                    <p class="text-gray-700 dark:text-gray-300 text-sm">${project.challenge}</p>
                  </div>
                ` : ''}
                
                ${project.solution ? `
                  <div class="glass-card p-4 rounded-xl">
                    <h4 class="text-base font-medium text-gray-900 dark:text-white mb-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      Solución
                    </h4>
                    <p class="text-gray-700 dark:text-gray-300 text-sm">${project.solution}</p>
                  </div>
                ` : ''}
                
                ${project.outcome ? `
                  <div class="glass-card p-4 rounded-xl">
                    <h4 class="text-base font-medium text-gray-900 dark:text-white mb-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-lime-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                      </svg>
                      Resultado
                    </h4>
                    <p class="text-gray-700 dark:text-gray-300 text-sm">${project.outcome}</p>
                  </div>
                ` : ''}
              </div>
            </div>
          ` : ''}
          
          <div class="flex flex-wrap gap-3 mt-6 pt-4 border-t border-gray-200 dark:border-gray-800">
            ${project.github ? `
              <a href="${project.github}" target="_blank" rel="noopener noreferrer" 
                 class="inline-flex items-center gap-2 px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-colors duration-300 shadow-md hover:shadow-lg text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
                Ver código
              </a>
            ` : ''}
            
            ${project.link ? `
              <a href="${project.link}" target="_blank" rel="noopener noreferrer" 
                 class="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-lime-500 to-green-600 text-white rounded-lg hover:from-lime-600 hover:to-green-700 transition-all duration-300 shadow-md hover:shadow-lg text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
                Ver proyecto
              </a>
            ` : ''}
          </div>
        </div>
      `;
      
      // Mostrar el modal
      modal.classList.add('active');
      document.body.style.overflow = 'hidden'; // Evitar scroll en el body
    };
    
    // Cerrar modal
    if (closeModalButton) {
      closeModalButton.addEventListener('click', () => {
        if (!modal) return;
        
        modal.classList.remove('active');
        document.body.style.overflow = ''; // Restaurar scroll
        startAutoplay();
      });
    }
    
    // Cerrar modal al hacer clic fuera del contenido
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.remove('active');
          document.body.style.overflow = ''; // Restaurar scroll
          startAutoplay();
        }
      });
    }
    
    // Cerrar modal con la tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal?.classList.contains('active')) {
        modal.classList.remove('active');
        document.body.style.overflow = ''; // Restaurar scroll
        startAutoplay();
      }
    });
  });
</script>