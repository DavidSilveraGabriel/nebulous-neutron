---
---
<button
class="theme-toggle p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-300 relative"
aria-label="Toggle theme"
>
<!-- SVG mantiene la misma estructura -->
<svg
xmlns="http://www.w3.org/2000/svg"
viewBox="0 0 24 24"
fill="none"
stroke="currentColor"
class="w-5 h-5"
aria-hidden="true"
>
<path
class="sun"
stroke-linecap="round"
stroke-linejoin="round"
stroke-width="2"
d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
/>
<path
class="moon"
stroke-linecap="round"
stroke-linejoin="round"
stroke-width="2"
d="M20.354 15.354A9 9 0 018.646 3.646 3.646 0 0012 21a9.003 9.003 0 008.354-5.646z"
/>
</svg>
<span class="sr-only">Toggle theme</span>
</button>
<style>
.sun {
opacity: 1;
transform: scale(1) rotate(0deg);
transform-origin: center;
transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}
.moon {
opacity: 0;
transform: scale(0.6) rotate(45deg);
transform-origin: center;
transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}
:global(.dark) .sun {
opacity: 0;
transform: scale(0.8) rotate(90deg);
}
:global(.dark) .moon {
opacity: 1;
transform: scale(1) rotate(0deg);
}
@media (prefers-reduced-motion: reduce) {
.sun,
.moon {
transition: opacity 0.3s ease !important;
}
}
</style>
<script>
// Función centralizada con tipo implícito
const updateTheme = (isDark: boolean | undefined) => {
const html = document.documentElement;
html.classList.toggle('dark', isDark);
localStorage.setItem('theme', isDark ? 'dark' : 'light');
};
// Manejador de clic con tipo MouseEvent inferido
const handleThemeClick = (e: { stopPropagation: () => void; currentTarget: any; }) => {
e.stopPropagation();
const currentTheme = document.documentElement.classList.contains('dark');
updateTheme(!currentTheme);
// Animación con type assertion (opcional, si necesitas ser más explícito)
const target = e.currentTarget; // No es necesario "as HTMLElement" aquí, pero si quieres ser explícito: as HTMLElement
target.animate(
[{ transform: 'scale(1)' }, { transform: 'scale(0.9)' }, { transform: 'scale(1)' }],
{ duration: 300, easing: 'ease-out' }
);
};
// Configurar listeners con tipos inferidos
const setupThemeToggles = () => {
const toggles = document.querySelectorAll('.theme-toggle');
toggles.forEach(toggle => {
toggle.removeEventListener('click', handleThemeClick);
toggle.addEventListener('click', handleThemeClick);
});
};
document.addEventListener('astro:page-load', () => {
setupThemeToggles();
// Inicializar tema con tipos inferidos
const savedTheme = localStorage.getItem('theme');
const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
updateTheme(savedTheme ? savedTheme === 'dark' : systemDark);
});
// Evento storage con tipo específico inferido
window.addEventListener('storage', (e) => {
if (e.key === 'theme') {
updateTheme(e.newValue === 'dark');
}
});
</script>
<script is:inline>
// Prevención FOUC con tipos inferidos
(() => {
const savedTheme = localStorage.getItem('theme');
const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
const isDark = savedTheme ? savedTheme === 'dark' : systemDark;
document.documentElement.classList.toggle('dark', isDark);
document.querySelectorAll('.theme-toggle').forEach(btn => {
btn.addEventListener('click', (e) => e.stopPropagation());
});
})();
</script>