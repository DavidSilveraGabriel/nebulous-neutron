---
import ThemeIcon from '../ui/ThemeIcon.astro';

const navItems = [
  { name: 'Services', path: '/#services' },
  { name: 'Projects', path: '/#projects' },
  { name: 'Testimonies', path: '/#testimoniosCarrusel' },
  
  { name: 'Blog', path: '/blog' },
  { name: 'Docs', path: '/docs' },
  
];

// Obtener la ruta actual
const currentPath = Astro.url.pathname;
---

<header class="fixed w-full top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2">
        <span class="text-xl font-bold text-gray-900 dark:text-white">DAVID</span>
      </a>

      <!-- Navigation -->
      <nav class="hidden md:flex items-center justify-between flex-1 px-16">
        <div></div> <!-- Spacer -->
        <div class="flex items-center space-x-8">
          {navItems.slice(0,3).map(item => {
            return (
              <a 
                href={item.path}
                class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300"
              >
                {item.name}
              </a>
            );
          })}
        </div>
        <div class="flex items-center space-x-8">
          <a 
            href={navItems[3].path}
            class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300"
          >
            {navItems[3].name}
          </a>
          <!--docs-->
          <a 
            href={navItems[4].path}
            class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300"
          >
            {navItems[4].name}
          </a>
          <ThemeIcon />
        </div>
      </nav>
      
      <!-- Mobile menu button -->
      <button 
        type="button" 
        class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400"
        aria-controls="mobile-menu"
        aria-expanded="false"
        id="menu-button"
      >
        <span class="sr-only">Open main menu</span>
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1">
      {navItems.map(item => (
        <a
          href={item.path}
          class="block px-3 py-2 text-base font-medium text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400"
        >
          {item.name}
        </a>
      ))}
    </div>
  </div>
</header>

<script>
  function setupMobileMenu() {
    const menuButton = document.getElementById('menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    let isOpen = false;

    if (!menuButton || !mobileMenu) return;

    menuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      isOpen = !isOpen;
      mobileMenu.classList.toggle('hidden');
      
      // Actualizar el atributo aria-expanded
      menuButton.setAttribute('aria-expanded', isOpen.toString());
    });

    // Cerrar menú al hacer clic fuera
    document.addEventListener('click', (e) => {
      if (isOpen && !menuButton.contains(e.target as Node) && !mobileMenu.contains(e.target as Node)) {
        isOpen = false;
        mobileMenu.classList.add('hidden');
        menuButton.setAttribute('aria-expanded', 'false');
      }
    });
  }

  // Configurar el menú en la carga inicial
  setupMobileMenu();

  // Reconfigurar el menú después de la navegación de Astro
  document.addEventListener('astro:page-load', setupMobileMenu);

  // Manejar el desplazamiento suave cuando se carga la página con un hash
  window.addEventListener('load', () => {
    if (location.hash) {
      const element = document.querySelector(location.hash);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
      }
    }
  });
</script>