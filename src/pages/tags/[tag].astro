---
import BaseLayout from '../../templates/Base.astro';
import BlogPost from '../../components/BlogPost.astro';

export interface Frontmatter {
  title: string;
  pubDate: Date;
  description: string;
  author: string;
  image: {
    url: string;
    alt: string;
  };
  tags: string[];
}

export interface Post {
  frontmatter: Frontmatter;
  url: string;
}

export interface Props {
  posts: Post[];
}

export async function getStaticPaths(): Promise<Array<{params: {tag: string}, props: Props}>> {
  const allPosts = await Astro.glob<{ frontmatter: Frontmatter }>('../posts/*.md');

  const processedPosts: Post[] = allPosts.map((post) => ({
    frontmatter: post.frontmatter,
    url: post.url ?? ''
  }));

  const uniqueTags: string[] = [...new Set(processedPosts.flatMap((post) => post.frontmatter.tags))];

  return uniqueTags.map((tag) => {
    const filteredPosts = processedPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>
</BaseLayout>

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>
</BaseLayout>